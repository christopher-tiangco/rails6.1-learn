name: Build / Deploy Production App

on:
  push:
    branches: [ "master" ]
  #pull_request:
  #  branches: [ "master" ]

  workflow_dispatch:
  
env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_REPOSITORY: rails6.1
  K8S_NAMESPACE: learn-rails

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_CACHE: /tmp/.buildx-cache
      BUILD_CACHE_NEW: /tmp/.buildx-cache-new
    steps:
      - uses: actions/checkout@v3
      
      - name: Set job environment variables
        run: |
          BUILD_DATETIME=$(date +'%Y-%m-%d_%H-%M-%S_UTC');
          echo "BUILD_DATETIME=$BUILD_DATETIME" >> $GITHUB_ENV;
          echo "IMAGE_TAG=learn-$BUILD_DATETIME" >> $GITHUB_ENV;

      - name: Cache Docker Layers
        uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_CACHE }}
          key: ${{ runner.os }}-buildx-${{ hashFiles('./Gemfile.lock', './yarn.lock') }}

      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build image, store to cache then push to registry
        uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: type=local,src=${{ env.BUILD_CACHE }}
          cache-to: type=local,mode=max,dest=${{ env.BUILD_CACHE_NEW }}
          secrets: |
            "master_key=${{ secrets.RAILS_MASTER_KEY }}"
          platforms: linux/arm64,linux/amd64
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ github.actor }}/${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }}
          file: docker/Dockerfile
          target: production
      - name: Move Cache
        run: |
          rm -rf ${{ env.BUILD_CACHE }}
          mv ${{ env.BUILD_CACHE_NEW }} ${{ env.BUILD_CACHE }}
    outputs:
      IMAGE_TAG: ${{ env.IMAGE_TAG }}

  deploy-to-k8s:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Ruby 2.7.4
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.4
          bundler-cache: true
      
      - uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}
          
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
          
      - name: Run database migrations
        env:
          RAILS_ENV: production
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          DATABASE_URL: ${{ secrets.POSTGRES_PRODUCTION_URI }}
        run: bundle exec bin/rails db:migrate
          
      - name: Deploy k8s services
        run: kubectl -n ${{ env.K8S_NAMESPACE }} apply -f k8s/${{ env.K8S_NAMESPACE }}-app-svc.yaml
        
      - name: Create k8s secrets
        run: |
          kubectl -n ${{ env.K8S_NAMESPACE }} create secret docker-registry ghcr-secret --docker-server=${{ env.DOCKER_REGISTRY }} --docker-username=${{ github.actor }} --docker-password=${{ secrets.GHCR_TOKEN }} --save-config --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n ${{ env.K8S_NAMESPACE }} create secret generic rails-master-key --from-literal=rails_master_key='${{ secrets.RAILS_MASTER_KEY }}' --save-config --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n ${{ env.K8S_NAMESPACE }} create secret generic postgres-production-uri --from-literal=postgres_production_uri='${{ secrets.POSTGRES_PRODUCTION_URI }}' --save-config --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy app
        run: |
          sed -i 's/{{ IMAGE }}/${{ env.DOCKER_REGISTRY}}\/${{ github.actor }}\/${{ env.DOCKER_REPOSITORY }}:${{ needs.build.outputs.IMAGE_TAG }}/g' k8s/${{ env.K8S_NAMESPACE }}-app-deployment.yaml
          kubectl -n ${{ env.K8S_NAMESPACE }} apply -f k8s/${{ env.K8S_NAMESPACE }}-app-deployment.yaml
  
      #- name: Run migrations on the first app pod
      #  run: kubectl -n ${{ env.K8S_NAMESPACE }} exec $(kubectl -n ${{ env.K8S_NAMESPACE }} get pods -o json | jq -r '.items[0].metadata.name') -- bash -c 'cd /home && bundle exec bin/rails db:migrate'